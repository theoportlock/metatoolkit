#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import pandas as pd
import json

def parse_json_or_scalar(val):
    try:
        return json.loads(val)
    except Exception:
        return val

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('input', help='Input TSV file')
    parser.add_argument('--to_replace', required=True, help='JSON or scalar')
    parser.add_argument('--value', help='Replacement value (optional)')
    parser.add_argument('--output', required=True, help='Output TSV file')
    parser.add_argument('--regex', action='store_true')
    args = parser.parse_args()

    df = pd.read_csv(args.input, sep='\t', index_col=0)
    to_replace = parse_json_or_scalar(args.to_replace)
    value = parse_json_or_scalar(args.value) if args.value else None

    print(f"Parsed to_replace: {to_replace} (type: {type(to_replace)})")
    print(f"Keys in DataFrame: {df.columns.tolist()}")

    if isinstance(to_replace, dict) and value is None:
        df = df.replace(to_replace=to_replace, regex=args.regex)
    else:
        df = df.replace(to_replace=to_replace, value=value, regex=args.regex)

    df.to_csv(args.output, sep='\t')

if __name__ == '__main__':
    main()

